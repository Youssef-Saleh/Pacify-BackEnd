
const mongoose = require('mongoose');
var ObjectId = require('mongoose').Types.ObjectId;

const mongoosePort = require('../env_variables/env_vars.json').mongoosePort
mongoose.connect(mongoosePort);

const express = require('express');
const bodyParser = require('body-parser');

const auth = require('../middlewares/token_auth');
const premiumCheck = require('../middlewares/premium_auth');

const event = require('../services/create_event');
const getArtist = require('../services/get_artist_by_song');
const getSong = require('../services/get_song_by_id');

/**
 * liking/unlinking Song requests.
 * @module likedSongsRoutes
 */
const likedSongsRoutes = (app, fs) => {
    // showing the liked Songs
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));

    /**
    * This function gets the liked Song that the user liked and requested for.
    * Then it shows all the Song the user liked.
    * @name get/likedSongs
    * @function
    * @memberof module:likedSongsRoutes
    * @inner
    * @param {*} req requesting the needed info from postman as the following:
    * @param {*} _id the user's id generated by the mongoBD as requested from the postman
    * @param {Array} res it shows all the Song that the user liked and requested for.
    */
    app.get('/likedSongs', auth, (req, res) => {
        mongoose.connection.db.collection('users',function(err, collection){
             collection.find({_id:new ObjectId(req.userId)}).toArray(function(err,docs){

                if (err) {
                    throw err;

                }

                arr = []

                for (var i = 0; i < docs[0].likedSongs.length; i++) {
                    arr.push(new ObjectId(docs[0].likedSongs[i]))
                }

                mongoose.connection.db.collection('songs',function(err, collection2){
                    collection2.find({_id:{ $in: arr}}).toArray(function(err,docs2){
       
                       if (err) {
                           throw err;
                       }
                       res.send(docs2);
                    });
                   });
             });
            });
    });
    // liking an album

    /**
    * This function likes an Songs that the user liked and requested for.
    * Then it updates the info of the user and the info of the Songs.
    * @name put/likedSongs
    * @function
    * @memberof module:likedSongsRoutes
    * @inner
    * @param {*} req requesting the needed info from postman as the following:
    * @param {*} _id the user's id generated by the mongoBD as requested from the postman.
    * @param {Array} userId it adds the the user id in the array of the userID in the Songs.
    * @param {Array} likedSongs it adds the the Songs id in the array of the SongsID in the Songs.
    */
    app.put('/likedSongs', auth, (req, res, next) => {
        var query;
        mongoose.connection.db.collection('users',function(err, collection){
            collection.updateOne(
                {_id: new ObjectId(req.userId)},
                {$push:{ likedSongs :req.body.songId}}
            );
        });
        mongoose.connection.db.collection('songs',function(err, collection){
            collection.updateOne(
                {_id: new ObjectId(req.body.songId)},
                {$push:{ userId :req.userId}}
            );
        });

        song = getSong.getSong(req.body.songId);
        song.then((result) => {
            artistName = result[0].artist

            artistId = getArtist.getArtistId(artistName);
            artistId.then( (id) => {
                event('like', req.userId, id, req.body.songId);
            })
        })

        

        res.end();
      });
    // unliking an album

    /**
    * This function likes an Songs that the user liked and requested for.
    * Then it updates the info of the user and the info of the Song.
    * @name put/unlikeSongs
    * @function
    * @memberof module:likedSongsRoutes
    * @inner
    * @param {*} req requesting the needed info from postman as the following:
    * @param {*} _id the user's id generated by the mongoBD as requested from the postman.
    * @param {Array} userId it removes the user id in the array of the userID in the Song.
    * @param {Array} likedSongs it removes the the Song id in the array of the SongID in the Song.
    */
    app.put('/unlikeSongs', auth, (req, res) => {
        mongoose.connection.db.collection('users',function(err, collection){
            collection.find({_id:new ObjectId (req.userId)}, {likedSongs:req.body.songId}).toArray(function(err,docs){
               if (err) {
                   throw err;
               }
               var arr = docs[0].likedSongs
               if (arr.length == 0) {
                   throw err
               }else{
                    collection.updateOne(
                        {_id: new ObjectId(req.userId)},
                        {$pull:{ likedSongs :req.body.songId}}
                    )
                  
                }
            });
            mongoose.connection.db.collection('songs',function(err, collection){
                collection.find({_id:new ObjectId (req.body.songId)}, {userId:req.userId}).toArray(function(err,docs){
                    if (err) {
                        throw err;
                    }
                    var arr = docs[0].userId
                    if (arr.length == 0) {
                        throw err
                    }else{
                        collection.updateOne(
                            {_id: new ObjectId(req.body.songId)},
                            {$pull:{ userId :req.userId}}
                        )
                        
                    }
                });
            });
        });

        song = getSong.getSong(req.body.songId);
        song.then((result) => {
            artistName = result[0].artist

            artistId = getArtist.getArtistId(artistName);
            artistId.then( (id) => {
                event('unlike', req.userId, id, req.body.songId);
            })
        })
        res.end();
    });
};

module.exports = likedSongsRoutes;