const mongoose = require('mongoose');
var ObjectId = require('mongoose').Types.ObjectId;

const mongoosePort = require('../env_variables/env_vars.json').mongoosePort
mongoose.connect(mongoosePort);

const express = require('express');
const bodyParser = require('body-parser');

/**
 * get all songs in an album request
 * @module getAlbumSongsRoutes
 */
const getAlbumSongsRoutes = (app, fs) => {
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: false }));
    /**
    * This function gets all the songs in an album that the user requested for.
    * @name get/getAlbumSongs
    * @function
    * @memberof module:getAlbumSongsRoutes
    * @inner
    * @param {*} req requesting the needed info from postman as the following:
    * @param {*} _id the album's id generated by the mongoBD as requested from the postman
    * @param {Array} res it shows all the available songs in the album the user requested for.
    */
    app.get('/getAlbumSongs', (req, res) => {
        mongoose.connection.db.collection('albums',function(err, collection){
            if (err){
                throw err;
            }
            collection.find({_id:new ObjectId(req.body.albumId)}).toArray(function(err,docs){

                if (err){
                    throw err;

                }
                arr = []

                for (var i = 0; i < docs[0].songs.length; i++) {
                    arr.push(docs[0].songs[i])
                }

                mongoose.connection.db.collection('songs',function(err, collection2){
                    collection2.find({name:{ $in: arr}}).toArray(function(err,docs2){
       
                       if (err) {
                           throw err;
                       }
                       res.send(docs2);
                    });
                   });
                res.send(arr);
            });
        });
    });
};

module.exports = getAlbumSongsRoutes;